<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio 12.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="12.0">
 <Targets>
  <Target Name="D:\Jobs\DataChecker\Source\DataChecker\bin\Debug\XYPlot.dll">
   <Modules>
    <Module Name="xyplot.dll">
     <Namespaces>
      <Namespace Name="NSXYPlot">
       <Types>
        <Type Name="XYPlot" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Drawing.Graphics,System.Windows.Forms.Control)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2016-06-24 22:36:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="d:\Jobs\DataChecker\Source\XYPlot" File="XYPlot.cs" Line="193">'XYPlot.XYPlot(Graphics, Control)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;XYPlot..ctor(Graphics, Control)&#xD;&#xA;XYPlot.commonConstructor():Void</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="d:\Jobs\DataChecker\Source\XYPlot" File="XYPlot.cs" Line="193">'XYPlot.XYPlot(Graphics, Control)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;XYPlot..ctor(Graphics, Control)&#xD;&#xA;XYPlot.commonConstructor():Void&#xD;&#xA;XYPlot.CalculateClientRectangle():Void</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.Drawing.Graphics,System.Windows.Forms.Control,System.Drawing.Point,System.Drawing.Size)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2016-06-24 22:36:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="d:\Jobs\DataChecker\Source\XYPlot" File="XYPlot.cs" Line="202">'XYPlot.XYPlot(Graphics, Control, Point, Size)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;XYPlot..ctor(Graphics, Control, Point, Size)&#xD;&#xA;XYPlot.commonConstructor():Void</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="d:\Jobs\DataChecker\Source\XYPlot" File="XYPlot.cs" Line="202">'XYPlot.XYPlot(Graphics, Control, Point, Size)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;XYPlot..ctor(Graphics, Control, Point, Size)&#xD;&#xA;XYPlot.commonConstructor():Void&#xD;&#xA;XYPlot.CalculateClientRectangle():Void</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.Drawing.Graphics,System.Windows.Forms.Control,System.Drawing.Rectangle)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2016-06-24 22:36:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="d:\Jobs\DataChecker\Source\XYPlot" File="XYPlot.cs" Line="211">'XYPlot.XYPlot(Graphics, Control, Rectangle)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;XYPlot..ctor(Graphics, Control, Rectangle)&#xD;&#xA;XYPlot.commonConstructor():Void</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="d:\Jobs\DataChecker\Source\XYPlot" File="XYPlot.cs" Line="211">'XYPlot.XYPlot(Graphics, Control, Rectangle)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;XYPlot..ctor(Graphics, Control, Rectangle)&#xD;&#xA;XYPlot.commonConstructor():Void&#xD;&#xA;XYPlot.CalculateClientRectangle():Void</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DrawReversibleCrossLines(System.Double,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2016-06-24 22:36:12Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="d:\Jobs\DataChecker\Source\XYPlot" File="XYPlot.cs" Line="731">'XYPlot.DrawReversibleCrossLines(double, bool)' calls into 'ControlPaint.DrawReversibleLine(Point, Point, Color)' which has a LinkDemand. By making this call, 'ControlPaint.DrawReversibleLine(Point, Point, Color)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'XYPlot.DrawReversibleCrossLines(double, bool)'&#xD;&#xA;   -&gt;'XYPlot.DrawReversibleCrossLines(double, bool)'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DrawReversibleCrossLines(System.Drawing.Point)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2016-06-24 22:36:12Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="d:\Jobs\DataChecker\Source\XYPlot" File="XYPlot.cs" Line="714">'XYPlot.DrawReversibleCrossLines(Point)' calls into 'ControlPaint.DrawReversibleLine(Point, Point, Color)' which has a LinkDemand. By making this call, 'ControlPaint.DrawReversibleLine(Point, Point, Color)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'XYPlot.DrawReversibleCrossLines(Point)'&#xD;&#xA;   -&gt;'XYPlot.DrawReversibleCrossLines(Point)'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DrawReversibleRectangle(System.Drawing.Point,System.Drawing.Point)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2016-06-24 22:36:12Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="d:\Jobs\DataChecker\Source\XYPlot" File="XYPlot.cs" Line="2171">'XYPlot.DrawReversibleRectangle(Point, Point)' calls into 'ControlPaint.FillReversibleRectangle(Rectangle, Color)' which has a LinkDemand. By making this call, 'ControlPaint.FillReversibleRectangle(Rectangle, Color)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'XYPlot.DrawReversibleRectangle(Point, Point)'&#xD;&#xA;   -&gt;'XYPlot.DrawReversibleRectangle(Point, Point)'</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="XYPlotCtrl" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#DrawReversibleLine(System.Drawing.Point,System.Drawing.Point)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2016-06-24 22:36:12Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="d:\Jobs\DataChecker\Source\XYPlot" File="XYPlotCtrl.cs" Line="88">'XYPlotCtrl.DrawReversibleLine(Point, Point)' calls into 'ControlPaint.DrawReversibleLine(Point, Point, Color)' which has a LinkDemand. By making this call, 'ControlPaint.DrawReversibleLine(Point, Point, Color)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'XYPlotCtrl.DrawReversibleLine(Point, Point)'&#xD;&#xA;   -&gt;'XYPlotCtrl.DrawReversibleLine(Point, Point)'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DrawReversibleRectangle(System.Drawing.Point,System.Drawing.Point)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2016-06-24 22:36:12Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="d:\Jobs\DataChecker\Source\XYPlot" File="XYPlotCtrl.cs" Line="72">'XYPlotCtrl.DrawReversibleRectangle(Point, Point)' calls into 'ControlPaint.FillReversibleRectangle(Rectangle, Color)' which has a LinkDemand. By making this call, 'ControlPaint.FillReversibleRectangle(Rectangle, Color)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'XYPlotCtrl.DrawReversibleRectangle(Point, Point)'&#xD;&#xA;   -&gt;'XYPlotCtrl.DrawReversibleRectangle(Point, Point)'</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="XYPlotViewCtrl" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#DrawReversibleLine(System.Drawing.Point,System.Drawing.Point)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2016-06-24 22:36:12Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="d:\Jobs\DataChecker\Source\XYPlot" File="XYPlotViewCtrl.cs" Line="482">'XYPlotViewCtrl.DrawReversibleLine(Point, Point)' calls into 'ControlPaint.DrawReversibleLine(Point, Point, Color)' which has a LinkDemand. By making this call, 'ControlPaint.DrawReversibleLine(Point, Point, Color)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'XYPlotViewCtrl.DrawReversibleLine(Point, Point)'&#xD;&#xA;   -&gt;'XYPlotViewCtrl.DrawReversibleLine(Point, Point)'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DrawReversibleRectangle(System.Drawing.Point,System.Drawing.Point)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2016-06-24 22:36:12Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="d:\Jobs\DataChecker\Source\XYPlot" File="XYPlotViewCtrl.cs" Line="466">'XYPlotViewCtrl.DrawReversibleRectangle(Point, Point)' calls into 'ControlPaint.FillReversibleRectangle(Rectangle, Color)' which has a LinkDemand. By making this call, 'ControlPaint.FillReversibleRectangle(Rectangle, Color)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'XYPlotViewCtrl.DrawReversibleRectangle(Point, Point)'&#xD;&#xA;   -&gt;'XYPlotViewCtrl.DrawReversibleRectangle(Point, Point)'</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214">
   <Name>Do not call overridable methods in constructors</Name>
   <Description>Virtual methods defined on the class should not be called from constructors. If a derived class has overridden the method, the derived class version will be called (before the derived class constructor is called).</Description>
   <Resolution Name="Default">{0} contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: {1}</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182331.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122">
   <Name>Do not indirectly expose methods with link demands</Name>
   <Description>Do not wrap a method protected by a LinkDemand with a method that does not perform a security check. A LinkDemand checks the permissions of the immediate caller rather than checking the permissions of all callers in the call stack. In this case, the permissions of the wrapper method will be checked. If the wrapper method does not, itself, check the permissions of callers higher in the call stack, malicious code might be able to execute the wrapped function even though it lacks permission to do so.</Description>
   <Resolution Name="Default">{0} calls into {1} which has a LinkDemand. By making this call, {1} is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: {2}</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182303.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="33">CriticalError</MessageLevel>
   <File Name="securityrules.dll" Version="12.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
